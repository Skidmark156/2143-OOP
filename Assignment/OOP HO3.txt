Part A: Conceptual Questions
1. Inheritance Definition
Inheritance is an object-oriented programming feature that allows a derived class to inherit properties and behaviors from a base class, promoting code reuse and hierarchy structuring.

2. Types of Inheritance

Single Inheritance: A derived class inherits from one base class. Example: A Car class inherits from Vehicle.

Multiple Inheritance: A derived class inherits from multiple base classes. Example: A FlyingCar inherits from both Car and Aircraft.

3. Overriding Methods
Method overriding allows a derived class to redefine a function from its base class to provide specialized behavior. This is useful for ensuring polymorphism.

4. Real-World Analogy
A bird and a sparrow: A Bird class has a fly() method, and a Sparrow class inherits from Bird but overrides fly() to modify how it flies.

Part B: Minimal Coding
C++ Code for Inheritance (Vehicle and Car Example)
#include <iostream>
using namespace std;

// Base class
class Vehicle {
public:
    string brand;
    Vehicle(string b) : brand(b) {}
    virtual void drive() { cout << brand << " is driving." << endl; }
};

// Derived class
class Car : public Vehicle {
public:
    int doors;
    Car(string b, int d) : Vehicle(b), doors(d) {}
    void drive() override { cout << brand << " car with " << doors << " doors is driving." << endl; }
};

int main() {
    Vehicle v("Generic Vehicle");
    Car c("Toyota", 4);
    
    v.drive();
    c.drive();
    
    return 0;
}

Part C: Reflection & Discussion
1. When to Use Inheritance

Good Use Case: When multiple classes share common behavior but require specialization (e.g., Employee â†’ Manager, Engineer).

Bad Use Case: When behavior varies widely, leading to deep hierarchies that are hard to maintain (e.g., using inheritance instead of composition for an Engine in a Car).

2. Method Overriding vs. Overloading

Overriding: Redefines a method in a derived class (runtime polymorphism).

Overloading: Same method name with different parameters (compile-time).

Why Overriding? It ensures derived classes can modify behavior dynamically without modifying the base class.

3. Inheritance vs. Interfaces/Abstract Classes

Inheritance allows sharing code through a base class.

Interfaces (abstract classes) define behavior without providing implementation.

Example: A Car can implement a Drivable interface instead of inheriting from a class.

4. Pitfalls of Multiple Inheritance

Diamond Problem: When a class inherits from two classes that both inherit from a common base class, causing ambiguity.

Solution: Use virtual inheritance in C++ or interfaces in Java.

Part D: Optional Research
1. Inheritance in Different Languages

C++ supports multiple inheritance but requires careful handling.

Java allows only single inheritance for classes but supports multiple interfaces.

2. Open-Closed Principle & Inheritance

Classes should be open for extension but closed for modification.

Example: Instead of modifying Vehicle, extend it by creating a Motorcycle class with a new drive() method.